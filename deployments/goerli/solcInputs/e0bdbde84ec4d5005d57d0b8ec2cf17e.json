{
  "language": "Solidity",
  "sources": {
    "contracts/TokenLock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n\r\nerror notTime();\r\nerror notYours();\r\nerror lengthsNotEqual();\r\nerror NoTokenIdSelected();\r\nerror ContractIsPaused();\r\nerror NotEnoughAllowance();\r\nerror insufficientBalance();\r\nerror NotAnERC721Contract();\r\nerror ContractNotApproved();\r\nerror NotAnERC1155Contract();\r\nerror LockPeriodCannotBeZero();\r\n\r\ncontract TokenLock is Ownable {\r\n    /*\r\n     This smart contract is used to lock tokens for specific time,\r\n     It doesnt come with reward,\r\n     It supports Any ERC20,ERC721,ERC1155 token\r\n     */\r\n    bool private paused = false;\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    //                                  Token INFO's                                          //\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    struct MyERC721 {\r\n        address owner;\r\n        uint128 lockTime;\r\n        uint128 lockPeriod;\r\n    }\r\n    // Mapping from the token Contract to its token, the then to its info\r\n    mapping(address => mapping(uint256 => MyERC721)) private ERC721Info;\r\n\r\n    struct MyERC20 {\r\n        uint256 tokenBalance;\r\n        uint128 lockTime;\r\n        uint128 lockPeriod;\r\n    }\r\n    // Mapping from the token Contract to its owner, the then to its info\r\n    mapping(address => mapping(address => MyERC20)) private ERC20Info;\r\n\r\n    struct MyERC1155 {\r\n        uint256 tokenBal;\r\n        uint128 lockPeriod;\r\n        uint128 lockTime;\r\n    }\r\n    // Mapping from the CA -> TokenID -> TokenNft Infp\r\n    mapping(address => mapping(address => mapping(uint256 => MyERC1155)))\r\n        private ERC1155Info;\r\n\r\n    modifier contractState() {\r\n        if (paused) revert ContractIsPaused();\r\n        _;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    //                             ERC20-Deposite-Withdrawal                                  //\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /** Withdraws the an ERC72 token of the caller\r\n     *  throws if the token address is not an ERC721 contract address\r\n     *  throws if the caller tries to withdraw before time\r\n     *  throws if callers is not the owner of the token\r\n     *  lockTime updates whenever a token of same types is deposited after certain time\r\n     *  or before the previous lockPeriod elapse\r\n     */\r\n\r\n    function depositeERC20(\r\n        address _token,\r\n        uint256 amount,\r\n        uint128 lockPeriod\r\n    ) public contractState {\r\n        IERC20Metadata token = IERC20Metadata(_token);\r\n        uint256 decimal = 10**token.decimals();\r\n        if (lockPeriod == 0) revert LockPeriodCannotBeZero();\r\n        if (amount * decimal > token.allowance(msg.sender, address(this)))\r\n            revert NotEnoughAllowance();\r\n        MyERC20 storage erc20 = ERC20Info[_token][msg.sender];\r\n        if (token.balanceOf(msg.sender) < amount * decimal)\r\n            revert insufficientBalance();\r\n        token.transferFrom(msg.sender, address(this), amount * decimal);\r\n        erc20.tokenBalance += amount * decimal;\r\n        erc20.lockTime = uint128(block.timestamp);\r\n        erc20.lockPeriod = lockPeriod;\r\n        emit ERC20Deposite(\r\n            _token,\r\n            msg.sender,\r\n            amount * decimal,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function depositeBulkERC20(\r\n        address[] calldata token,\r\n        uint256[] calldata amount,\r\n        uint128 lockPeriod\r\n    ) external {\r\n        if (token.length != amount.length) revert lengthsNotEqual();\r\n        uint256 i;\r\n        for (; i < token.length; ) {\r\n            depositeERC20(token[i], amount[i], lockPeriod);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Withdraws ERC20 token of the caller \r\n        throws if the caller tries to withdraw before time\r\n        throws if callers balance is less that the amount\r\n     */\r\n    function withdrawErc20(address token, uint256 amount) public {\r\n        MyERC20 storage erc20 = ERC20Info[token][msg.sender];\r\n        uint256 balance = erc20.tokenBalance;\r\n        uint256 decimal = 10**IERC20Metadata(token).decimals();\r\n        if (block.timestamp - erc20.lockTime < erc20.lockPeriod)\r\n            revert notTime();\r\n        if (balance < amount * decimal) revert insufficientBalance();\r\n        unchecked {\r\n            erc20.tokenBalance -= amount * decimal;\r\n            if (erc20.tokenBalance == 0) {\r\n                erc20.lockPeriod = 0;\r\n                erc20.lockTime = 0;\r\n            }\r\n        }\r\n        IERC20(token).transfer(msg.sender, amount * decimal);\r\n        emit ERC20Withdrawal(token, msg.sender, amount * decimal);\r\n    }\r\n\r\n    function erc20BulkWithdrawal(\r\n        address[] calldata token,\r\n        uint256[] calldata amount\r\n    ) external {\r\n        if (amount.length != token.length) revert lengthsNotEqual();\r\n        uint256 i;\r\n        for (; i < token.length; ) {\r\n            withdrawErc20(token[i], amount[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    //                           ERC721-Deposite-Withdrawal                                   //\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    /** Deposite the an ERC721 token of the caller\r\n     *  throws if the token address is not an ERC721 contract address\r\n     *  lockTime updates whenever a token of same types is deposited after certain time\r\n     *  or before the previous lockPeriod elapse\r\n     */\r\n    function depositeERC721(\r\n        address _token,\r\n        uint256 tokenID,\r\n        uint256 _lockPeriod\r\n    ) public contractState {\r\n        IERC721 token = IERC721(_token);\r\n        if (!token.isApprovedForAll(msg.sender, address(this)))\r\n            revert ContractNotApproved();\r\n        if (_lockPeriod == 0) revert LockPeriodCannotBeZero();\r\n        if (token.ownerOf(tokenID) != msg.sender) revert notYours();\r\n        IERC721(token).transferFrom(msg.sender, address(this), tokenID);\r\n        ERC721Info[_token][tokenID] = MyERC721({\r\n            owner: msg.sender,\r\n            lockTime: uint128(block.timestamp),\r\n            lockPeriod: uint128(_lockPeriod)\r\n        });\r\n        emit ERC721Deposite(_token, msg.sender, tokenID, block.timestamp);\r\n    }\r\n\r\n    function depositeBulkERC721(\r\n        address token,\r\n        uint256[] calldata tokenID,\r\n        uint128 lockPeriod\r\n    ) external {\r\n        uint i;\r\n        for (; i < tokenID.length; ) {\r\n            depositeERC721(token, tokenID[i], lockPeriod);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Withdraws the an ERC721 token of the caller\r\n     *  throws if the token address is not an ERC721 contract address\r\n     *  throws if the caller tries to withdraw before time\r\n     *  throws if callers is not the owner of the token\r\n     */\r\n\r\n    function withdrawERC721(address token, uint256 tokenID) public {\r\n        MyERC721 storage erc721 = ERC721Info[token][tokenID];\r\n        if (erc721.owner != msg.sender) revert notYours();\r\n        if (block.timestamp - erc721.lockTime < erc721.lockPeriod)\r\n            revert notTime();\r\n        IERC721(token).transferFrom(address(this), msg.sender, tokenID);\r\n        ERC721Info[token][tokenID] = MyERC721({\r\n            owner: address(0),\r\n            lockTime: 0,\r\n            lockPeriod: 0\r\n        });\r\n        emit ERC721Withdrawal(token, msg.sender, tokenID);\r\n    }\r\n\r\n    function bulkWithdrawERC721(address token, uint256[] calldata tokenID)\r\n        external\r\n    {\r\n        if (tokenID.length == 0) revert NoTokenIdSelected();\r\n        uint j;\r\n        for (; j < tokenID.length; ) {\r\n            withdrawERC721(token, tokenID[j]);\r\n            unchecked {\r\n                ++j;\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    //                          ERC1155-Deposite-Withdrawal                                   //\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /** Deposite the an ERC1155 token of the caller\r\n     *  throws if the token address is not an ERC1155 contract address\r\n     *  lockTime updates whenever a token of same types is deposited after certain time\r\n     *  or before the previous lockPeriod elapse\r\n     */\r\n\r\n    function depositeERC1155(\r\n        address _token,\r\n        uint256 tokenID,\r\n        uint256 amount,\r\n        uint128 _lockPeriod\r\n    ) public contractState {\r\n        IERC1155 token = IERC1155(_token);\r\n        if (!token.isApprovedForAll(msg.sender, address(this)))\r\n            revert ContractNotApproved();\r\n        if (_lockPeriod == 0) revert LockPeriodCannotBeZero();\r\n        MyERC1155 storage erc1155 = ERC1155Info[_token][msg.sender][tokenID];\r\n        IERC1155(token).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            tokenID,\r\n            amount,\r\n            \"\"\r\n        );\r\n        erc1155.tokenBal += amount;\r\n        erc1155.lockPeriod = _lockPeriod;\r\n        erc1155.lockTime = uint128(block.timestamp);\r\n        emit ERC1155Deposite(\r\n            _token,\r\n            msg.sender,\r\n            tokenID,\r\n            amount,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function depositeBulkERC11155(\r\n        address token,\r\n        uint256[] calldata tokenID,\r\n        uint256[] calldata amount,\r\n        uint128 lockPeriod\r\n    ) external {\r\n        if (amount.length != tokenID.length) revert lengthsNotEqual();\r\n        uint256 k;\r\n        for (; k < tokenID.length; ) {\r\n            depositeERC1155(token, tokenID[k], amount[k], lockPeriod);\r\n            unchecked {\r\n                ++k;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Withdraws the ERC1155 token of the caller\r\n     *  throws if the caller tries to withdraw before time\r\n     *  throws if callers tries withdrawing an amount greater than that of token id it own\r\n     */\r\n\r\n    function withdrawERC1155(\r\n        address token,\r\n        uint256 tokenID,\r\n        uint256 amount\r\n    ) public {\r\n        MyERC1155 storage erc1155 = ERC1155Info[token][msg.sender][tokenID];\r\n        uint256 _lockTime = erc1155.lockTime;\r\n        if (block.timestamp - _lockTime < erc1155.lockPeriod) revert notTime();\r\n        if (erc1155.tokenBal < amount) revert insufficientBalance();\r\n        unchecked {\r\n            erc1155.tokenBal -= amount;\r\n        }\r\n        if (erc1155.tokenBal == 0) {\r\n            erc1155.lockPeriod = 0;\r\n            erc1155.lockTime = 0;\r\n        }\r\n\r\n        IERC1155(token).safeTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            tokenID,\r\n            amount,\r\n            \"\"\r\n        );\r\n        emit ERC1155Withdrawal(token, msg.sender, tokenID, amount);\r\n    }\r\n\r\n    function erc1155BulkWithdrawal(\r\n        address token,\r\n        uint256[] calldata tokenID,\r\n        uint256[] calldata amount\r\n    ) external {\r\n        if (amount.length != tokenID.length) revert lengthsNotEqual();\r\n        uint256 i;\r\n        for (; i < tokenID.length; ) {\r\n            withdrawERC1155(token, tokenID[i], amount[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    //                                CONTRACT-STATE                                          //\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function flipContractState(bool _state) external onlyOwner {\r\n        paused = _state;\r\n    }\r\n\r\n    function State() external view returns (bool) {\r\n        return paused;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    //                                ON-RECEIVED-FUNCTIONS                                   //\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    //                                  VIEW-PURE-FUNCTIONS                                   //\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    function getERC20Info(address contractAddress, address account)\r\n        external\r\n        view\r\n        returns (MyERC20 memory)\r\n    {\r\n        return ERC20Info[contractAddress][account];\r\n    }\r\n\r\n    function getERC721Info(address contractAddress, uint256 token)\r\n        external\r\n        view\r\n        returns (MyERC721 memory)\r\n    {\r\n        return ERC721Info[contractAddress][token];\r\n    }\r\n\r\n    function getERC1155Info(\r\n        address contractAddress,\r\n        address account,\r\n        uint256 tokenID\r\n    ) external view returns (MyERC1155 memory) {\r\n        return ERC1155Info[contractAddress][account][tokenID];\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    //                                  EVENTS                                                //\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    event ERC20Deposite(\r\n        address token,\r\n        address owner,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event ERC721Deposite(\r\n        address token,\r\n        address owner,\r\n        uint256 tokenID,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event ERC1155Deposite(\r\n        address token,\r\n        address owner,\r\n        uint256 tokenID,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n    event ERC20Withdrawal(address token, address owner, uint256 amount);\r\n\r\n    event ERC721Withdrawal(address token, address owner, uint256 tokenID);\r\n\r\n    event ERC1155Withdrawal(\r\n        address token,\r\n        address owner,\r\n        uint256 tokenID,\r\n        uint256 amount\r\n    );\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}