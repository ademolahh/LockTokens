{
  "address": "0xBfaeE73308f9906BeCAeB77409714422C0CF6925",
  "abi": [
    {
      "inputs": [],
      "name": "ContractIsPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractNotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockPeriodCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoTokenIdSelected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "insufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lengthsNotEqual",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "notTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "notYours",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ERC1155Deposite",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC1155Withdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ERC20Deposite",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20Withdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ERC721Deposite",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ERC721Withdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "State",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenID",
          "type": "uint256[]"
        }
      ],
      "name": "bulkWithdrawERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenID",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        },
        {
          "internalType": "uint128",
          "name": "lockPeriod",
          "type": "uint128"
        }
      ],
      "name": "depositeBulkERC11155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "token",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        },
        {
          "internalType": "uint128",
          "name": "lockPeriod",
          "type": "uint128"
        }
      ],
      "name": "depositeBulkERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenID",
          "type": "uint256[]"
        },
        {
          "internalType": "uint128",
          "name": "lockPeriod",
          "type": "uint128"
        }
      ],
      "name": "depositeBulkERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "_lockPeriod",
          "type": "uint128"
        }
      ],
      "name": "depositeERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "lockPeriod",
          "type": "uint128"
        }
      ],
      "name": "depositeERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockPeriod",
          "type": "uint256"
        }
      ],
      "name": "depositeERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenID",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "name": "erc1155BulkWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "token",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "name": "erc20BulkWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "flipContractState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getERC1155Info",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenBal",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "lockPeriod",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lockTime",
              "type": "uint128"
            }
          ],
          "internalType": "struct TokenLock.MyERC1155",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getERC20Info",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "lockTime",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lockPeriod",
              "type": "uint128"
            }
          ],
          "internalType": "struct TokenLock.MyERC20",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        }
      ],
      "name": "getERC721Info",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "lockTime",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lockPeriod",
              "type": "uint128"
            }
          ],
          "internalType": "struct TokenLock.MyERC721",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a39b875f29bcd619cb8e800585039c3000392ca2ca87c1e43d3e85d4d9443a2",
  "receipt": {
    "to": null,
    "from": "0xd7fD1B5bd0c01591c66Efa845A156510B4DB3645",
    "contractAddress": "0xBfaeE73308f9906BeCAeB77409714422C0CF6925",
    "transactionIndex": 1,
    "gasUsed": "3089810",
    "logsBloom": "0x
    "blockHash": "0xd0f99c8c87d34eb3331cdff3fd34b6f7af79e1c5df362116a995444143dd855d",
    "transactionHash": "0x3a39b875f29bcd619cb8e800585039c3000392ca2ca87c1e43d3e85d4d9443a2",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 7286825,
        "transactionHash": "0x3a39b875f29bcd619cb8e800585039c3000392ca2ca87c1e43d3e85d4d9443a2",
        "address": "0xBfaeE73308f9906BeCAeB77409714422C0CF6925",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d7fd1b5bd0c01591c66efa845a156510b4db3645"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd0f99c8c87d34eb3331cdff3fd34b6f7af79e1c5df362116a995444143dd855d"
      }
    ],
    "blockNumber": 7286825,
    "cumulativeGasUsed": "3150472",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e0bdbde84ec4d5005d57d0b8ec2cf17e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ContractIsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockPeriodCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokenIdSelected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"insufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lengthsNotEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"notTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"notYours\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ERC1155Deposite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC1155Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ERC20Deposite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ERC721Deposite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ERC721Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"State\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenID\",\"type\":\"uint256[]\"}],\"name\":\"bulkWithdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenID\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128\",\"name\":\"lockPeriod\",\"type\":\"uint128\"}],\"name\":\"depositeBulkERC11155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128\",\"name\":\"lockPeriod\",\"type\":\"uint128\"}],\"name\":\"depositeBulkERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenID\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128\",\"name\":\"lockPeriod\",\"type\":\"uint128\"}],\"name\":\"depositeBulkERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_lockPeriod\",\"type\":\"uint128\"}],\"name\":\"depositeERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"lockPeriod\",\"type\":\"uint128\"}],\"name\":\"depositeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"depositeERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenID\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"erc1155BulkWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"erc20BulkWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"flipContractState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getERC1155Info\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenBal\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"lockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockTime\",\"type\":\"uint128\"}],\"internalType\":\"struct TokenLock.MyERC1155\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getERC20Info\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"lockTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockPeriod\",\"type\":\"uint128\"}],\"internalType\":\"struct TokenLock.MyERC20\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"getERC721Info\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"lockTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockPeriod\",\"type\":\"uint128\"}],\"internalType\":\"struct TokenLock.MyERC721\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositeERC1155(address,uint256,uint256,uint128)\":{\"notice\":\"Deposite the an ERC1155 token of the caller  throws if the token address is not an ERC1155 contract address  lockTime updates whenever a token of same types is deposited after certain time  or before the previous lockPeriod elapse\"},\"depositeERC20(address,uint256,uint128)\":{\"notice\":\"Withdraws the an ERC72 token of the caller  throws if the token address is not an ERC721 contract address  throws if the caller tries to withdraw before time  throws if callers is not the owner of the token  lockTime updates whenever a token of same types is deposited after certain time  or before the previous lockPeriod elapse\"},\"depositeERC721(address,uint256,uint256)\":{\"notice\":\"Deposite the an ERC721 token of the caller  throws if the token address is not an ERC721 contract address  lockTime updates whenever a token of same types is deposited after certain time  or before the previous lockPeriod elapse\"},\"withdrawERC1155(address,uint256,uint256)\":{\"notice\":\"Withdraws the ERC1155 token of the caller  throws if the caller tries to withdraw before time  throws if callers tries withdrawing an amount greater than that of token id it own\"},\"withdrawERC721(address,uint256)\":{\"notice\":\"Withdraws the an ERC721 token of the caller  throws if the token address is not an ERC721 contract address  throws if the caller tries to withdraw before time  throws if callers is not the owner of the token\"},\"withdrawErc20(address,uint256)\":{\"notice\":\"Withdraws ERC20 token of the caller  throws if the caller tries to withdraw before time throws if callers balance is less that the amount\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenLock.sol\":\"TokenLock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/TokenLock.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nerror notTime();\\r\\nerror notYours();\\r\\nerror lengthsNotEqual();\\r\\nerror NoTokenIdSelected();\\r\\nerror ContractIsPaused();\\r\\nerror NotEnoughAllowance();\\r\\nerror insufficientBalance();\\r\\nerror NotAnERC721Contract();\\r\\nerror ContractNotApproved();\\r\\nerror NotAnERC1155Contract();\\r\\nerror LockPeriodCannotBeZero();\\r\\n\\r\\ncontract TokenLock is Ownable {\\r\\n    /*\\r\\n     This smart contract is used to lock tokens for specific time,\\r\\n     It doesnt come with reward,\\r\\n     It supports Any ERC20,ERC721,ERC1155 token\\r\\n     */\\r\\n    bool private paused = false;\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //                                  Token INFO's                                          //\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    struct MyERC721 {\\r\\n        address owner;\\r\\n        uint128 lockTime;\\r\\n        uint128 lockPeriod;\\r\\n    }\\r\\n    // Mapping from the token Contract to its token, the then to its info\\r\\n    mapping(address => mapping(uint256 => MyERC721)) private ERC721Info;\\r\\n\\r\\n    struct MyERC20 {\\r\\n        uint256 tokenBalance;\\r\\n        uint128 lockTime;\\r\\n        uint128 lockPeriod;\\r\\n    }\\r\\n    // Mapping from the token Contract to its owner, the then to its info\\r\\n    mapping(address => mapping(address => MyERC20)) private ERC20Info;\\r\\n\\r\\n    struct MyERC1155 {\\r\\n        uint256 tokenBal;\\r\\n        uint128 lockPeriod;\\r\\n        uint128 lockTime;\\r\\n    }\\r\\n    // Mapping from the CA -> TokenID -> TokenNft Infp\\r\\n    mapping(address => mapping(address => mapping(uint256 => MyERC1155)))\\r\\n        private ERC1155Info;\\r\\n\\r\\n    modifier contractState() {\\r\\n        if (paused) revert ContractIsPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //                             ERC20-Deposite-Withdrawal                                  //\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    /** Withdraws the an ERC72 token of the caller\\r\\n     *  throws if the token address is not an ERC721 contract address\\r\\n     *  throws if the caller tries to withdraw before time\\r\\n     *  throws if callers is not the owner of the token\\r\\n     *  lockTime updates whenever a token of same types is deposited after certain time\\r\\n     *  or before the previous lockPeriod elapse\\r\\n     */\\r\\n\\r\\n    function depositeERC20(\\r\\n        address _token,\\r\\n        uint256 amount,\\r\\n        uint128 lockPeriod\\r\\n    ) public contractState {\\r\\n        IERC20Metadata token = IERC20Metadata(_token);\\r\\n        uint256 decimal = 10**token.decimals();\\r\\n        if (lockPeriod == 0) revert LockPeriodCannotBeZero();\\r\\n        if (amount * decimal > token.allowance(msg.sender, address(this)))\\r\\n            revert NotEnoughAllowance();\\r\\n        MyERC20 storage erc20 = ERC20Info[_token][msg.sender];\\r\\n        if (token.balanceOf(msg.sender) < amount * decimal)\\r\\n            revert insufficientBalance();\\r\\n        token.transferFrom(msg.sender, address(this), amount * decimal);\\r\\n        erc20.tokenBalance += amount * decimal;\\r\\n        erc20.lockTime = uint128(block.timestamp);\\r\\n        erc20.lockPeriod = lockPeriod;\\r\\n        emit ERC20Deposite(\\r\\n            _token,\\r\\n            msg.sender,\\r\\n            amount * decimal,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function depositeBulkERC20(\\r\\n        address[] calldata token,\\r\\n        uint256[] calldata amount,\\r\\n        uint128 lockPeriod\\r\\n    ) external {\\r\\n        if (token.length != amount.length) revert lengthsNotEqual();\\r\\n        uint256 i;\\r\\n        for (; i < token.length; ) {\\r\\n            depositeERC20(token[i], amount[i], lockPeriod);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** Withdraws ERC20 token of the caller \\r\\n        throws if the caller tries to withdraw before time\\r\\n        throws if callers balance is less that the amount\\r\\n     */\\r\\n    function withdrawErc20(address token, uint256 amount) public {\\r\\n        MyERC20 storage erc20 = ERC20Info[token][msg.sender];\\r\\n        uint256 balance = erc20.tokenBalance;\\r\\n        uint256 decimal = 10**IERC20Metadata(token).decimals();\\r\\n        if (block.timestamp - erc20.lockTime < erc20.lockPeriod)\\r\\n            revert notTime();\\r\\n        if (balance < amount * decimal) revert insufficientBalance();\\r\\n        unchecked {\\r\\n            erc20.tokenBalance -= amount * decimal;\\r\\n            if (erc20.tokenBalance == 0) {\\r\\n                erc20.lockPeriod = 0;\\r\\n                erc20.lockTime = 0;\\r\\n            }\\r\\n        }\\r\\n        IERC20(token).transfer(msg.sender, amount * decimal);\\r\\n        emit ERC20Withdrawal(token, msg.sender, amount * decimal);\\r\\n    }\\r\\n\\r\\n    function erc20BulkWithdrawal(\\r\\n        address[] calldata token,\\r\\n        uint256[] calldata amount\\r\\n    ) external {\\r\\n        if (amount.length != token.length) revert lengthsNotEqual();\\r\\n        uint256 i;\\r\\n        for (; i < token.length; ) {\\r\\n            withdrawErc20(token[i], amount[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //                           ERC721-Deposite-Withdrawal                                   //\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    /** Deposite the an ERC721 token of the caller\\r\\n     *  throws if the token address is not an ERC721 contract address\\r\\n     *  lockTime updates whenever a token of same types is deposited after certain time\\r\\n     *  or before the previous lockPeriod elapse\\r\\n     */\\r\\n    function depositeERC721(\\r\\n        address _token,\\r\\n        uint256 tokenID,\\r\\n        uint256 _lockPeriod\\r\\n    ) public contractState {\\r\\n        IERC721 token = IERC721(_token);\\r\\n        if (!token.isApprovedForAll(msg.sender, address(this)))\\r\\n            revert ContractNotApproved();\\r\\n        if (_lockPeriod == 0) revert LockPeriodCannotBeZero();\\r\\n        if (token.ownerOf(tokenID) != msg.sender) revert notYours();\\r\\n        IERC721(token).transferFrom(msg.sender, address(this), tokenID);\\r\\n        ERC721Info[_token][tokenID] = MyERC721({\\r\\n            owner: msg.sender,\\r\\n            lockTime: uint128(block.timestamp),\\r\\n            lockPeriod: uint128(_lockPeriod)\\r\\n        });\\r\\n        emit ERC721Deposite(_token, msg.sender, tokenID, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function depositeBulkERC721(\\r\\n        address token,\\r\\n        uint256[] calldata tokenID,\\r\\n        uint128 lockPeriod\\r\\n    ) external {\\r\\n        uint i;\\r\\n        for (; i < tokenID.length; ) {\\r\\n            depositeERC721(token, tokenID[i], lockPeriod);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** Withdraws the an ERC721 token of the caller\\r\\n     *  throws if the token address is not an ERC721 contract address\\r\\n     *  throws if the caller tries to withdraw before time\\r\\n     *  throws if callers is not the owner of the token\\r\\n     */\\r\\n\\r\\n    function withdrawERC721(address token, uint256 tokenID) public {\\r\\n        MyERC721 storage erc721 = ERC721Info[token][tokenID];\\r\\n        if (erc721.owner != msg.sender) revert notYours();\\r\\n        if (block.timestamp - erc721.lockTime < erc721.lockPeriod)\\r\\n            revert notTime();\\r\\n        IERC721(token).transferFrom(address(this), msg.sender, tokenID);\\r\\n        ERC721Info[token][tokenID] = MyERC721({\\r\\n            owner: address(0),\\r\\n            lockTime: 0,\\r\\n            lockPeriod: 0\\r\\n        });\\r\\n        emit ERC721Withdrawal(token, msg.sender, tokenID);\\r\\n    }\\r\\n\\r\\n    function bulkWithdrawERC721(address token, uint256[] calldata tokenID)\\r\\n        external\\r\\n    {\\r\\n        if (tokenID.length == 0) revert NoTokenIdSelected();\\r\\n        uint j;\\r\\n        for (; j < tokenID.length; ) {\\r\\n            withdrawERC721(token, tokenID[j]);\\r\\n            unchecked {\\r\\n                ++j;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //                          ERC1155-Deposite-Withdrawal                                   //\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    /** Deposite the an ERC1155 token of the caller\\r\\n     *  throws if the token address is not an ERC1155 contract address\\r\\n     *  lockTime updates whenever a token of same types is deposited after certain time\\r\\n     *  or before the previous lockPeriod elapse\\r\\n     */\\r\\n\\r\\n    function depositeERC1155(\\r\\n        address _token,\\r\\n        uint256 tokenID,\\r\\n        uint256 amount,\\r\\n        uint128 _lockPeriod\\r\\n    ) public contractState {\\r\\n        IERC1155 token = IERC1155(_token);\\r\\n        if (!token.isApprovedForAll(msg.sender, address(this)))\\r\\n            revert ContractNotApproved();\\r\\n        if (_lockPeriod == 0) revert LockPeriodCannotBeZero();\\r\\n        MyERC1155 storage erc1155 = ERC1155Info[_token][msg.sender][tokenID];\\r\\n        IERC1155(token).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            tokenID,\\r\\n            amount,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        erc1155.tokenBal += amount;\\r\\n        erc1155.lockPeriod = _lockPeriod;\\r\\n        erc1155.lockTime = uint128(block.timestamp);\\r\\n        emit ERC1155Deposite(\\r\\n            _token,\\r\\n            msg.sender,\\r\\n            tokenID,\\r\\n            amount,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function depositeBulkERC11155(\\r\\n        address token,\\r\\n        uint256[] calldata tokenID,\\r\\n        uint256[] calldata amount,\\r\\n        uint128 lockPeriod\\r\\n    ) external {\\r\\n        if (amount.length != tokenID.length) revert lengthsNotEqual();\\r\\n        uint256 k;\\r\\n        for (; k < tokenID.length; ) {\\r\\n            depositeERC1155(token, tokenID[k], amount[k], lockPeriod);\\r\\n            unchecked {\\r\\n                ++k;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** Withdraws the ERC1155 token of the caller\\r\\n     *  throws if the caller tries to withdraw before time\\r\\n     *  throws if callers tries withdrawing an amount greater than that of token id it own\\r\\n     */\\r\\n\\r\\n    function withdrawERC1155(\\r\\n        address token,\\r\\n        uint256 tokenID,\\r\\n        uint256 amount\\r\\n    ) public {\\r\\n        MyERC1155 storage erc1155 = ERC1155Info[token][msg.sender][tokenID];\\r\\n        uint256 _lockTime = erc1155.lockTime;\\r\\n        if (block.timestamp - _lockTime < erc1155.lockPeriod) revert notTime();\\r\\n        if (erc1155.tokenBal < amount) revert insufficientBalance();\\r\\n        unchecked {\\r\\n            erc1155.tokenBal -= amount;\\r\\n        }\\r\\n        if (erc1155.tokenBal == 0) {\\r\\n            erc1155.lockPeriod = 0;\\r\\n            erc1155.lockTime = 0;\\r\\n        }\\r\\n\\r\\n        IERC1155(token).safeTransferFrom(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            tokenID,\\r\\n            amount,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        emit ERC1155Withdrawal(token, msg.sender, tokenID, amount);\\r\\n    }\\r\\n\\r\\n    function erc1155BulkWithdrawal(\\r\\n        address token,\\r\\n        uint256[] calldata tokenID,\\r\\n        uint256[] calldata amount\\r\\n    ) external {\\r\\n        if (amount.length != tokenID.length) revert lengthsNotEqual();\\r\\n        uint256 i;\\r\\n        for (; i < tokenID.length; ) {\\r\\n            withdrawERC1155(token, tokenID[i], amount[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //                                CONTRACT-STATE                                          //\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function flipContractState(bool _state) external onlyOwner {\\r\\n        paused = _state;\\r\\n    }\\r\\n\\r\\n    function State() external view returns (bool) {\\r\\n        return paused;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //                                ON-RECEIVED-FUNCTIONS                                   //\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function onERC1155Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        uint256,\\r\\n        bytes memory\\r\\n    ) public virtual returns (bytes4) {\\r\\n        return this.onERC1155Received.selector;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //                                  VIEW-PURE-FUNCTIONS                                   //\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    function getERC20Info(address contractAddress, address account)\\r\\n        external\\r\\n        view\\r\\n        returns (MyERC20 memory)\\r\\n    {\\r\\n        return ERC20Info[contractAddress][account];\\r\\n    }\\r\\n\\r\\n    function getERC721Info(address contractAddress, uint256 token)\\r\\n        external\\r\\n        view\\r\\n        returns (MyERC721 memory)\\r\\n    {\\r\\n        return ERC721Info[contractAddress][token];\\r\\n    }\\r\\n\\r\\n    function getERC1155Info(\\r\\n        address contractAddress,\\r\\n        address account,\\r\\n        uint256 tokenID\\r\\n    ) external view returns (MyERC1155 memory) {\\r\\n        return ERC1155Info[contractAddress][account][tokenID];\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //                                  EVENTS                                                //\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    event ERC20Deposite(\\r\\n        address token,\\r\\n        address owner,\\r\\n        uint256 amount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event ERC721Deposite(\\r\\n        address token,\\r\\n        address owner,\\r\\n        uint256 tokenID,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event ERC1155Deposite(\\r\\n        address token,\\r\\n        address owner,\\r\\n        uint256 tokenID,\\r\\n        uint256 amount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event ERC20Withdrawal(address token, address owner, uint256 amount);\\r\\n\\r\\n    event ERC721Withdrawal(address token, address owner, uint256 tokenID);\\r\\n\\r\\n    event ERC1155Withdrawal(\\r\\n        address token,\\r\\n        address owner,\\r\\n        uint256 tokenID,\\r\\n        uint256 amount\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x82cacb419474ca7cbb11eaf13154783a3787d9252ff3f90e11cb8b0a65daf973\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405260008060146101000a81548160ff0219169083151502179055503480156200002b57600080fd5b506200004c620000406200005260201b60201c565b6200005a60201b60201c565b6200011e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61369b806200012e6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c8063921a92bb116100b8578063f1309fe71161007c578063f1309fe71461030c578063f1b6dccd14610328578063f23a6e6114610346578063f2fde38b14610376578063f3e414f814610392578063f89df61a146103ae57610137565b8063921a92bb1461028057806396a45b371461029c5780639d4a1e85146102b8578063bd1f4b52146102d4578063efea2824146102f057610137565b80633c459967116100ff5780633c459967146101f05780634ecce2931461020c578063715018a6146102285780637216ee8a146102325780638da5cb5b1461026257610137565b8063072a45771461013c5780631f3cfe58146101585780632779e43d146101885780632ed54438146101b857806339ead720146101d4575b600080fd5b61015660048036038101906101519190612556565b6103ca565b005b610172600480360381019061016d919061266b565b610473565b60405161017f9190612727565b60405180910390f35b6101a2600480360381019061019d9190612742565b6105c8565b6040516101af91906127e6565b60405180910390f35b6101d260048036038101906101cd9190612839565b61070f565b005b6101ee60048036038101906101e99190612866565b610734565b005b61020a600480360381019061020591906128e5565b6109fe565b005b6102266004803603810190610221919061297a565b610aa9565b005b610230610b29565b005b61024c600480360381019061024791906129da565b610b3d565b6040516102599190612a5c565b60405180910390f35b61026a610c72565b6040516102779190612a86565b60405180910390f35b61029a60048036038101906102959190612aa1565b610c9b565b005b6102b660048036038101906102b19190612b36565b610d38565b005b6102d260048036038101906102cd9190612bdd565b610dd7565b005b6102ee60048036038101906102e9919061266b565b610e2d565b005b61030a60048036038101906103059190612866565b6111b2565b005b61032660048036038101906103219190612c51565b611606565b005b610330611ad0565b60405161033d9190612cb3565b60405180910390f35b610360600480360381019061035b9190612e0f565b611ae6565b60405161036d9190612ee1565b60405180910390f35b610390600480360381019061038b9190612efc565b611afb565b005b6103ac60048036038101906103a7919061266b565b611b7f565b005b6103c860048036038101906103c39190612f29565b611f24565b005b838390508282905014610409576040517f51ebe3c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8484905081101561046c5761046185858381811061042d5761042c612f90565b5b90506020020160208101906104429190612efc565b84848481811061045557610454612f90565b5b90506020020135610e2d565b80600101905061040c565b5050505050565b61047b6123a2565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050905092915050565b6105d06123fd565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152505090509392505050565b610717612258565b80600060146101000a81548160ff02191690831515021790555050565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020905060008160010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1690508160010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16814261083b9190612fee565b1015610873576040517fddb6dcad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82826000015410156108b1576040517f47108e3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8282600001600082825403925050819055506000826000015414156109495760008260010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060008260010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b8473ffffffffffffffffffffffffffffffffffffffff1663f242432a303387876040518563ffffffff1660e01b81526004016109889493929190613068565b600060405180830381600087803b1580156109a257600080fd5b505af11580156109b6573d6000803e3d6000fd5b505050507feb12d491e2ce9cd94fb842ae67a291d05ebce5061338e29f829acf27bd7f2932853386866040516109ef94939291906130c0565b60405180910390a15050505050565b828290508585905014610a3d576040517f51ebe3c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b85859050811015610aa157610a96868683818110610a6157610a60612f90565b5b9050602002016020810190610a769190612efc565b858584818110610a8957610a88612f90565b5b9050602002013584611606565b806001019050610a40565b505050505050565b6000828290501415610ae7576040517f4f11a6d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82829050811015610b2357610b1884848484818110610b0c57610b0b612f90565b5b90506020020135611b7f565b806001019050610aea565b50505050565b610b31612258565b610b3b60006122d6565b565b610b45612442565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b838390508282905014610cda576040517f51ebe3c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b84849050811015610d3057610d2586868684818110610cff57610cfe612f90565b5b90506020020135858585818110610d1957610d18612f90565b5b90506020020135610734565b806001019050610cdd565b505050505050565b848490508383905014610d77576040517f51ebe3c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b85859050811015610dce57610dc387878784818110610d9c57610d9b612f90565b5b90506020020135868685818110610db657610db5612f90565b5b9050602002013585611f24565b806001019050610d7a565b50505050505050565b60005b83839050811015610e2657610e1b85858584818110610dfc57610dfb612f90565b5b90506020020135846fffffffffffffffffffffffffffffffff166111b2565b806001019050610dda565b5050505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154905060008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610efe57600080fd5b505afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f36919061313e565b600a610f42919061329e565b90508260010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168360010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1642610fb59190612fee565b1015610fed576040517fddb6dcad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8084610ff991906132e9565b821015611032576040517f47108e3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80840283600001600082825403925050819055506000836000015414156110cc5760008360010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060008360010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3383876110f591906132e9565b6040518363ffffffff1660e01b8152600401611112929190613343565b602060405180830381600087803b15801561112c57600080fd5b505af1158015611140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111649190613381565b507f2fbb3e8dc2807d6a61feb98fc2120153f77b2c0d25ef6272e1756935dd62c8478533838761119491906132e9565b6040516111a3939291906133ae565b60405180910390a15050505050565b600060149054906101000a900460ff16156111f9576040517f6d39fcd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff1663e985e9c533306040518363ffffffff1660e01b81526004016112399291906133e5565b60206040518083038186803b15801561125157600080fd5b505afa158015611265573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112899190613381565b6112bf576040517fe22ef0a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008214156112fa576040517f92f83d9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161134a919061340e565b60206040518083038186803b15801561136257600080fd5b505afa158015611376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139a919061343e565b73ffffffffffffffffffffffffffffffffffffffff16146113e7576040517fdba304a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611424939291906133ae565b600060405180830381600087803b15801561143e57600080fd5b505af1158015611452573d6000803e3d6000fd5b5050505060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001426fffffffffffffffffffffffffffffffff168152602001836fffffffffffffffffffffffffffffffff16815250600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050507fab157d1de51e01e68e04650e60492d578b20dac598827b115b4d99787b921a5d843385426040516115f894939291906130c0565b60405180910390a150505050565b600060149054906101000a900460ff161561164d576040517f6d39fcd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083905060008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561169a57600080fd5b505afa1580156116ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d2919061313e565b600a6116de919061329e565b90506000836fffffffffffffffffffffffffffffffff16141561172d576040517f92f83d9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016117689291906133e5565b60206040518083038186803b15801561178057600080fd5b505afa158015611794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b89190613480565b81856117c491906132e9565b11156117fc576040517f4fd3af0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818561188891906132e9565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016118c19190612a86565b60206040518083038186803b1580156118d957600080fd5b505afa1580156118ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119119190613480565b1015611949576040517f47108e3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330858961197391906132e9565b6040518463ffffffff1660e01b8152600401611991939291906133ae565b602060405180830381600087803b1580156119ab57600080fd5b505af11580156119bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e39190613381565b5081856119f091906132e9565b816000016000828254611a0391906134ad565b92505081905550428160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550838160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507f18063c8d2da0a3654aba244eee08e33d3f757c774a44bf3f5c80dc73c35c1b9d86338488611aaf91906132e9565b42604051611ac094939291906130c0565b60405180910390a1505050505050565b60008060149054906101000a900460ff16905090565b600063f23a6e6160e01b905095945050505050565b611b03612258565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6a90613586565b60405180910390fd5b611b7c816122d6565b50565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c5c576040517fdba304a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168160010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1642611ccd9190612fee565b1015611d05576040517fddb6dcad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b8152600401611d42939291906133ae565b600060405180830381600087803b158015611d5c57600080fd5b505af1158015611d70573d6000803e3d6000fd5b505050506040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050507fdce1abc7607cf83c96953308072c045ec35d02fbf5777e7d0ec8b102cd89ff81833384604051611f17939291906133ae565b60405180910390a1505050565b600060149054906101000a900460ff1615611f6b576040517f6d39fcd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008490508073ffffffffffffffffffffffffffffffffffffffff1663e985e9c533306040518363ffffffff1660e01b8152600401611fab9291906133e5565b60206040518083038186803b158015611fc357600080fd5b505afa158015611fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffb9190613381565b612031576040517fe22ef0a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826fffffffffffffffffffffffffffffffff16141561207e576040517f92f83d9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002090508173ffffffffffffffffffffffffffffffffffffffff1663f242432a333088886040518563ffffffff1660e01b815260040161214e9493929190613068565b600060405180830381600087803b15801561216857600080fd5b505af115801561217c573d6000803e3d6000fd5b505050508381600001600082825461219491906134ad565b92505081905550828160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550428160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fcab5412dac89f5d42b62a58bd6df482b7d67584786686339271542412a1e8f6d86338787426040516122489594939291906135a6565b60405180910390a1505050505050565b61226061239a565b73ffffffffffffffffffffffffffffffffffffffff1661227e610c72565b73ffffffffffffffffffffffffffffffffffffffff16146122d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122cb90613645565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b60405180606001604052806000815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b60405180606001604052806000815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126124c0576124bf61249b565b5b8235905067ffffffffffffffff8111156124dd576124dc6124a0565b5b6020830191508360208202830111156124f9576124f86124a5565b5b9250929050565b60008083601f8401126125165761251561249b565b5b8235905067ffffffffffffffff811115612533576125326124a0565b5b60208301915083602082028301111561254f5761254e6124a5565b5b9250929050565b600080600080604085870312156125705761256f612491565b5b600085013567ffffffffffffffff81111561258e5761258d612496565b5b61259a878288016124aa565b9450945050602085013567ffffffffffffffff8111156125bd576125bc612496565b5b6125c987828801612500565b925092505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612602826125d7565b9050919050565b612612816125f7565b811461261d57600080fd5b50565b60008135905061262f81612609565b92915050565b6000819050919050565b61264881612635565b811461265357600080fd5b50565b6000813590506126658161263f565b92915050565b6000806040838503121561268257612681612491565b5b600061269085828601612620565b92505060206126a185828601612656565b9150509250929050565b6126b4816125f7565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6126df816126ba565b82525050565b6060820160008201516126fb60008501826126ab565b50602082015161270e60208501826126d6565b50604082015161272160408501826126d6565b50505050565b600060608201905061273c60008301846126e5565b92915050565b60008060006060848603121561275b5761275a612491565b5b600061276986828701612620565b935050602061277a86828701612620565b925050604061278b86828701612656565b9150509250925092565b61279e81612635565b82525050565b6060820160008201516127ba6000850182612795565b5060208201516127cd60208501826126d6565b5060408201516127e060408501826126d6565b50505050565b60006060820190506127fb60008301846127a4565b92915050565b60008115159050919050565b61281681612801565b811461282157600080fd5b50565b6000813590506128338161280d565b92915050565b60006020828403121561284f5761284e612491565b5b600061285d84828501612824565b91505092915050565b60008060006060848603121561287f5761287e612491565b5b600061288d86828701612620565b935050602061289e86828701612656565b92505060406128af86828701612656565b9150509250925092565b6128c2816126ba565b81146128cd57600080fd5b50565b6000813590506128df816128b9565b92915050565b60008060008060006060868803121561290157612900612491565b5b600086013567ffffffffffffffff81111561291f5761291e612496565b5b61292b888289016124aa565b9550955050602086013567ffffffffffffffff81111561294e5761294d612496565b5b61295a88828901612500565b9350935050604061296d888289016128d0565b9150509295509295909350565b60008060006040848603121561299357612992612491565b5b60006129a186828701612620565b935050602084013567ffffffffffffffff8111156129c2576129c1612496565b5b6129ce86828701612500565b92509250509250925092565b600080604083850312156129f1576129f0612491565b5b60006129ff85828601612620565b9250506020612a1085828601612620565b9150509250929050565b606082016000820151612a306000850182612795565b506020820151612a4360208501826126d6565b506040820151612a5660408501826126d6565b50505050565b6000606082019050612a716000830184612a1a565b92915050565b612a80816125f7565b82525050565b6000602082019050612a9b6000830184612a77565b92915050565b600080600080600060608688031215612abd57612abc612491565b5b6000612acb88828901612620565b955050602086013567ffffffffffffffff811115612aec57612aeb612496565b5b612af888828901612500565b9450945050604086013567ffffffffffffffff811115612b1b57612b1a612496565b5b612b2788828901612500565b92509250509295509295909350565b60008060008060008060808789031215612b5357612b52612491565b5b6000612b6189828a01612620565b965050602087013567ffffffffffffffff811115612b8257612b81612496565b5b612b8e89828a01612500565b9550955050604087013567ffffffffffffffff811115612bb157612bb0612496565b5b612bbd89828a01612500565b93509350506060612bd089828a016128d0565b9150509295509295509295565b60008060008060608587031215612bf757612bf6612491565b5b6000612c0587828801612620565b945050602085013567ffffffffffffffff811115612c2657612c25612496565b5b612c3287828801612500565b93509350506040612c45878288016128d0565b91505092959194509250565b600080600060608486031215612c6a57612c69612491565b5b6000612c7886828701612620565b9350506020612c8986828701612656565b9250506040612c9a868287016128d0565b9150509250925092565b612cad81612801565b82525050565b6000602082019050612cc86000830184612ca4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d1c82612cd3565b810181811067ffffffffffffffff82111715612d3b57612d3a612ce4565b5b80604052505050565b6000612d4e612487565b9050612d5a8282612d13565b919050565b600067ffffffffffffffff821115612d7a57612d79612ce4565b5b612d8382612cd3565b9050602081019050919050565b82818337600083830152505050565b6000612db2612dad84612d5f565b612d44565b905082815260208101848484011115612dce57612dcd612cce565b5b612dd9848285612d90565b509392505050565b600082601f830112612df657612df561249b565b5b8135612e06848260208601612d9f565b91505092915050565b600080600080600060a08688031215612e2b57612e2a612491565b5b6000612e3988828901612620565b9550506020612e4a88828901612620565b9450506040612e5b88828901612656565b9350506060612e6c88828901612656565b925050608086013567ffffffffffffffff811115612e8d57612e8c612496565b5b612e9988828901612de1565b9150509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612edb81612ea6565b82525050565b6000602082019050612ef66000830184612ed2565b92915050565b600060208284031215612f1257612f11612491565b5b6000612f2084828501612620565b91505092915050565b60008060008060808587031215612f4357612f42612491565b5b6000612f5187828801612620565b9450506020612f6287828801612656565b9350506040612f7387828801612656565b9250506060612f84878288016128d0565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ff982612635565b915061300483612635565b92508282101561301757613016612fbf565b5b828203905092915050565b61302b81612635565b82525050565b600082825260208201905092915050565b50565b6000613052600083613031565b915061305d82613042565b600082019050919050565b600060a08201905061307d6000830187612a77565b61308a6020830186612a77565b6130976040830185613022565b6130a46060830184613022565b81810360808301526130b581613045565b905095945050505050565b60006080820190506130d56000830187612a77565b6130e26020830186612a77565b6130ef6040830185613022565b6130fc6060830184613022565b95945050505050565b600060ff82169050919050565b61311b81613105565b811461312657600080fd5b50565b60008151905061313881613112565b92915050565b60006020828403121561315457613153612491565b5b600061316284828501613129565b91505092915050565b60008160011c9050919050565b6000808291508390505b60018511156131c25780860481111561319e5761319d612fbf565b5b60018516156131ad5780820291505b80810290506131bb8561316b565b9450613182565b94509492505050565b6000826131db5760019050613297565b816131e95760009050613297565b81600181146131ff576002811461320957613238565b6001915050613297565b60ff84111561321b5761321a612fbf565b5b8360020a91508482111561323257613231612fbf565b5b50613297565b5060208310610133831016604e8410600b841016171561326d5782820a90508381111561326857613267612fbf565b5b613297565b61327a8484846001613178565b9250905081840481111561329157613290612fbf565b5b81810290505b9392505050565b60006132a982612635565b91506132b483613105565b92506132e17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846131cb565b905092915050565b60006132f482612635565b91506132ff83612635565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561333857613337612fbf565b5b828202905092915050565b60006040820190506133586000830185612a77565b6133656020830184613022565b9392505050565b60008151905061337b8161280d565b92915050565b60006020828403121561339757613396612491565b5b60006133a58482850161336c565b91505092915050565b60006060820190506133c36000830186612a77565b6133d06020830185612a77565b6133dd6040830184613022565b949350505050565b60006040820190506133fa6000830185612a77565b6134076020830184612a77565b9392505050565b60006020820190506134236000830184613022565b92915050565b60008151905061343881612609565b92915050565b60006020828403121561345457613453612491565b5b600061346284828501613429565b91505092915050565b60008151905061347a8161263f565b92915050565b60006020828403121561349657613495612491565b5b60006134a48482850161346b565b91505092915050565b60006134b882612635565b91506134c383612635565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134f8576134f7612fbf565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613570602683613503565b915061357b82613514565b604082019050919050565b6000602082019050818103600083015261359f81613563565b9050919050565b600060a0820190506135bb6000830188612a77565b6135c86020830187612a77565b6135d56040830186613022565b6135e26060830185613022565b6135ef6080830184613022565b9695505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061362f602083613503565b915061363a826135f9565b602082019050919050565b6000602082019050818103600083015261365e81613622565b905091905056fea2646970667358221220b5fde5f168833c91cfa5216330839908f0e9276637b3070533dd47d058129ccc64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c8063921a92bb116100b8578063f1309fe71161007c578063f1309fe71461030c578063f1b6dccd14610328578063f23a6e6114610346578063f2fde38b14610376578063f3e414f814610392578063f89df61a146103ae57610137565b8063921a92bb1461028057806396a45b371461029c5780639d4a1e85146102b8578063bd1f4b52146102d4578063efea2824146102f057610137565b80633c459967116100ff5780633c459967146101f05780634ecce2931461020c578063715018a6146102285780637216ee8a146102325780638da5cb5b1461026257610137565b8063072a45771461013c5780631f3cfe58146101585780632779e43d146101885780632ed54438146101b857806339ead720146101d4575b600080fd5b61015660048036038101906101519190612556565b6103ca565b005b610172600480360381019061016d919061266b565b610473565b60405161017f9190612727565b60405180910390f35b6101a2600480360381019061019d9190612742565b6105c8565b6040516101af91906127e6565b60405180910390f35b6101d260048036038101906101cd9190612839565b61070f565b005b6101ee60048036038101906101e99190612866565b610734565b005b61020a600480360381019061020591906128e5565b6109fe565b005b6102266004803603810190610221919061297a565b610aa9565b005b610230610b29565b005b61024c600480360381019061024791906129da565b610b3d565b6040516102599190612a5c565b60405180910390f35b61026a610c72565b6040516102779190612a86565b60405180910390f35b61029a60048036038101906102959190612aa1565b610c9b565b005b6102b660048036038101906102b19190612b36565b610d38565b005b6102d260048036038101906102cd9190612bdd565b610dd7565b005b6102ee60048036038101906102e9919061266b565b610e2d565b005b61030a60048036038101906103059190612866565b6111b2565b005b61032660048036038101906103219190612c51565b611606565b005b610330611ad0565b60405161033d9190612cb3565b60405180910390f35b610360600480360381019061035b9190612e0f565b611ae6565b60405161036d9190612ee1565b60405180910390f35b610390600480360381019061038b9190612efc565b611afb565b005b6103ac60048036038101906103a7919061266b565b611b7f565b005b6103c860048036038101906103c39190612f29565b611f24565b005b838390508282905014610409576040517f51ebe3c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8484905081101561046c5761046185858381811061042d5761042c612f90565b5b90506020020160208101906104429190612efc565b84848481811061045557610454612f90565b5b90506020020135610e2d565b80600101905061040c565b5050505050565b61047b6123a2565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050905092915050565b6105d06123fd565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152505090509392505050565b610717612258565b80600060146101000a81548160ff02191690831515021790555050565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020905060008160010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1690508160010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16814261083b9190612fee565b1015610873576040517fddb6dcad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82826000015410156108b1576040517f47108e3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8282600001600082825403925050819055506000826000015414156109495760008260010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060008260010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b8473ffffffffffffffffffffffffffffffffffffffff1663f242432a303387876040518563ffffffff1660e01b81526004016109889493929190613068565b600060405180830381600087803b1580156109a257600080fd5b505af11580156109b6573d6000803e3d6000fd5b505050507feb12d491e2ce9cd94fb842ae67a291d05ebce5061338e29f829acf27bd7f2932853386866040516109ef94939291906130c0565b60405180910390a15050505050565b828290508585905014610a3d576040517f51ebe3c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b85859050811015610aa157610a96868683818110610a6157610a60612f90565b5b9050602002016020810190610a769190612efc565b858584818110610a8957610a88612f90565b5b9050602002013584611606565b806001019050610a40565b505050505050565b6000828290501415610ae7576040517f4f11a6d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82829050811015610b2357610b1884848484818110610b0c57610b0b612f90565b5b90506020020135611b7f565b806001019050610aea565b50505050565b610b31612258565b610b3b60006122d6565b565b610b45612442565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b838390508282905014610cda576040517f51ebe3c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b84849050811015610d3057610d2586868684818110610cff57610cfe612f90565b5b90506020020135858585818110610d1957610d18612f90565b5b90506020020135610734565b806001019050610cdd565b505050505050565b848490508383905014610d77576040517f51ebe3c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b85859050811015610dce57610dc387878784818110610d9c57610d9b612f90565b5b90506020020135868685818110610db657610db5612f90565b5b9050602002013585611f24565b806001019050610d7a565b50505050505050565b60005b83839050811015610e2657610e1b85858584818110610dfc57610dfb612f90565b5b90506020020135846fffffffffffffffffffffffffffffffff166111b2565b806001019050610dda565b5050505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154905060008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610efe57600080fd5b505afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f36919061313e565b600a610f42919061329e565b90508260010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168360010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1642610fb59190612fee565b1015610fed576040517fddb6dcad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8084610ff991906132e9565b821015611032576040517f47108e3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80840283600001600082825403925050819055506000836000015414156110cc5760008360010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060008360010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3383876110f591906132e9565b6040518363ffffffff1660e01b8152600401611112929190613343565b602060405180830381600087803b15801561112c57600080fd5b505af1158015611140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111649190613381565b507f2fbb3e8dc2807d6a61feb98fc2120153f77b2c0d25ef6272e1756935dd62c8478533838761119491906132e9565b6040516111a3939291906133ae565b60405180910390a15050505050565b600060149054906101000a900460ff16156111f9576040517f6d39fcd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff1663e985e9c533306040518363ffffffff1660e01b81526004016112399291906133e5565b60206040518083038186803b15801561125157600080fd5b505afa158015611265573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112899190613381565b6112bf576040517fe22ef0a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008214156112fa576040517f92f83d9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161134a919061340e565b60206040518083038186803b15801561136257600080fd5b505afa158015611376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139a919061343e565b73ffffffffffffffffffffffffffffffffffffffff16146113e7576040517fdba304a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611424939291906133ae565b600060405180830381600087803b15801561143e57600080fd5b505af1158015611452573d6000803e3d6000fd5b5050505060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001426fffffffffffffffffffffffffffffffff168152602001836fffffffffffffffffffffffffffffffff16815250600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050507fab157d1de51e01e68e04650e60492d578b20dac598827b115b4d99787b921a5d843385426040516115f894939291906130c0565b60405180910390a150505050565b600060149054906101000a900460ff161561164d576040517f6d39fcd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083905060008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561169a57600080fd5b505afa1580156116ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d2919061313e565b600a6116de919061329e565b90506000836fffffffffffffffffffffffffffffffff16141561172d576040517f92f83d9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016117689291906133e5565b60206040518083038186803b15801561178057600080fd5b505afa158015611794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b89190613480565b81856117c491906132e9565b11156117fc576040517f4fd3af0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818561188891906132e9565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016118c19190612a86565b60206040518083038186803b1580156118d957600080fd5b505afa1580156118ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119119190613480565b1015611949576040517f47108e3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330858961197391906132e9565b6040518463ffffffff1660e01b8152600401611991939291906133ae565b602060405180830381600087803b1580156119ab57600080fd5b505af11580156119bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e39190613381565b5081856119f091906132e9565b816000016000828254611a0391906134ad565b92505081905550428160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550838160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507f18063c8d2da0a3654aba244eee08e33d3f757c774a44bf3f5c80dc73c35c1b9d86338488611aaf91906132e9565b42604051611ac094939291906130c0565b60405180910390a1505050505050565b60008060149054906101000a900460ff16905090565b600063f23a6e6160e01b905095945050505050565b611b03612258565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6a90613586565b60405180910390fd5b611b7c816122d6565b50565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c5c576040517fdba304a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168160010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1642611ccd9190612fee565b1015611d05576040517fddb6dcad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b8152600401611d42939291906133ae565b600060405180830381600087803b158015611d5c57600080fd5b505af1158015611d70573d6000803e3d6000fd5b505050506040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050507fdce1abc7607cf83c96953308072c045ec35d02fbf5777e7d0ec8b102cd89ff81833384604051611f17939291906133ae565b60405180910390a1505050565b600060149054906101000a900460ff1615611f6b576040517f6d39fcd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008490508073ffffffffffffffffffffffffffffffffffffffff1663e985e9c533306040518363ffffffff1660e01b8152600401611fab9291906133e5565b60206040518083038186803b158015611fc357600080fd5b505afa158015611fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffb9190613381565b612031576040517fe22ef0a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826fffffffffffffffffffffffffffffffff16141561207e576040517f92f83d9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002090508173ffffffffffffffffffffffffffffffffffffffff1663f242432a333088886040518563ffffffff1660e01b815260040161214e9493929190613068565b600060405180830381600087803b15801561216857600080fd5b505af115801561217c573d6000803e3d6000fd5b505050508381600001600082825461219491906134ad565b92505081905550828160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550428160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fcab5412dac89f5d42b62a58bd6df482b7d67584786686339271542412a1e8f6d86338787426040516122489594939291906135a6565b60405180910390a1505050505050565b61226061239a565b73ffffffffffffffffffffffffffffffffffffffff1661227e610c72565b73ffffffffffffffffffffffffffffffffffffffff16146122d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122cb90613645565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b60405180606001604052806000815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b60405180606001604052806000815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126124c0576124bf61249b565b5b8235905067ffffffffffffffff8111156124dd576124dc6124a0565b5b6020830191508360208202830111156124f9576124f86124a5565b5b9250929050565b60008083601f8401126125165761251561249b565b5b8235905067ffffffffffffffff811115612533576125326124a0565b5b60208301915083602082028301111561254f5761254e6124a5565b5b9250929050565b600080600080604085870312156125705761256f612491565b5b600085013567ffffffffffffffff81111561258e5761258d612496565b5b61259a878288016124aa565b9450945050602085013567ffffffffffffffff8111156125bd576125bc612496565b5b6125c987828801612500565b925092505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612602826125d7565b9050919050565b612612816125f7565b811461261d57600080fd5b50565b60008135905061262f81612609565b92915050565b6000819050919050565b61264881612635565b811461265357600080fd5b50565b6000813590506126658161263f565b92915050565b6000806040838503121561268257612681612491565b5b600061269085828601612620565b92505060206126a185828601612656565b9150509250929050565b6126b4816125f7565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6126df816126ba565b82525050565b6060820160008201516126fb60008501826126ab565b50602082015161270e60208501826126d6565b50604082015161272160408501826126d6565b50505050565b600060608201905061273c60008301846126e5565b92915050565b60008060006060848603121561275b5761275a612491565b5b600061276986828701612620565b935050602061277a86828701612620565b925050604061278b86828701612656565b9150509250925092565b61279e81612635565b82525050565b6060820160008201516127ba6000850182612795565b5060208201516127cd60208501826126d6565b5060408201516127e060408501826126d6565b50505050565b60006060820190506127fb60008301846127a4565b92915050565b60008115159050919050565b61281681612801565b811461282157600080fd5b50565b6000813590506128338161280d565b92915050565b60006020828403121561284f5761284e612491565b5b600061285d84828501612824565b91505092915050565b60008060006060848603121561287f5761287e612491565b5b600061288d86828701612620565b935050602061289e86828701612656565b92505060406128af86828701612656565b9150509250925092565b6128c2816126ba565b81146128cd57600080fd5b50565b6000813590506128df816128b9565b92915050565b60008060008060006060868803121561290157612900612491565b5b600086013567ffffffffffffffff81111561291f5761291e612496565b5b61292b888289016124aa565b9550955050602086013567ffffffffffffffff81111561294e5761294d612496565b5b61295a88828901612500565b9350935050604061296d888289016128d0565b9150509295509295909350565b60008060006040848603121561299357612992612491565b5b60006129a186828701612620565b935050602084013567ffffffffffffffff8111156129c2576129c1612496565b5b6129ce86828701612500565b92509250509250925092565b600080604083850312156129f1576129f0612491565b5b60006129ff85828601612620565b9250506020612a1085828601612620565b9150509250929050565b606082016000820151612a306000850182612795565b506020820151612a4360208501826126d6565b506040820151612a5660408501826126d6565b50505050565b6000606082019050612a716000830184612a1a565b92915050565b612a80816125f7565b82525050565b6000602082019050612a9b6000830184612a77565b92915050565b600080600080600060608688031215612abd57612abc612491565b5b6000612acb88828901612620565b955050602086013567ffffffffffffffff811115612aec57612aeb612496565b5b612af888828901612500565b9450945050604086013567ffffffffffffffff811115612b1b57612b1a612496565b5b612b2788828901612500565b92509250509295509295909350565b60008060008060008060808789031215612b5357612b52612491565b5b6000612b6189828a01612620565b965050602087013567ffffffffffffffff811115612b8257612b81612496565b5b612b8e89828a01612500565b9550955050604087013567ffffffffffffffff811115612bb157612bb0612496565b5b612bbd89828a01612500565b93509350506060612bd089828a016128d0565b9150509295509295509295565b60008060008060608587031215612bf757612bf6612491565b5b6000612c0587828801612620565b945050602085013567ffffffffffffffff811115612c2657612c25612496565b5b612c3287828801612500565b93509350506040612c45878288016128d0565b91505092959194509250565b600080600060608486031215612c6a57612c69612491565b5b6000612c7886828701612620565b9350506020612c8986828701612656565b9250506040612c9a868287016128d0565b9150509250925092565b612cad81612801565b82525050565b6000602082019050612cc86000830184612ca4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d1c82612cd3565b810181811067ffffffffffffffff82111715612d3b57612d3a612ce4565b5b80604052505050565b6000612d4e612487565b9050612d5a8282612d13565b919050565b600067ffffffffffffffff821115612d7a57612d79612ce4565b5b612d8382612cd3565b9050602081019050919050565b82818337600083830152505050565b6000612db2612dad84612d5f565b612d44565b905082815260208101848484011115612dce57612dcd612cce565b5b612dd9848285612d90565b509392505050565b600082601f830112612df657612df561249b565b5b8135612e06848260208601612d9f565b91505092915050565b600080600080600060a08688031215612e2b57612e2a612491565b5b6000612e3988828901612620565b9550506020612e4a88828901612620565b9450506040612e5b88828901612656565b9350506060612e6c88828901612656565b925050608086013567ffffffffffffffff811115612e8d57612e8c612496565b5b612e9988828901612de1565b9150509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612edb81612ea6565b82525050565b6000602082019050612ef66000830184612ed2565b92915050565b600060208284031215612f1257612f11612491565b5b6000612f2084828501612620565b91505092915050565b60008060008060808587031215612f4357612f42612491565b5b6000612f5187828801612620565b9450506020612f6287828801612656565b9350506040612f7387828801612656565b9250506060612f84878288016128d0565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ff982612635565b915061300483612635565b92508282101561301757613016612fbf565b5b828203905092915050565b61302b81612635565b82525050565b600082825260208201905092915050565b50565b6000613052600083613031565b915061305d82613042565b600082019050919050565b600060a08201905061307d6000830187612a77565b61308a6020830186612a77565b6130976040830185613022565b6130a46060830184613022565b81810360808301526130b581613045565b905095945050505050565b60006080820190506130d56000830187612a77565b6130e26020830186612a77565b6130ef6040830185613022565b6130fc6060830184613022565b95945050505050565b600060ff82169050919050565b61311b81613105565b811461312657600080fd5b50565b60008151905061313881613112565b92915050565b60006020828403121561315457613153612491565b5b600061316284828501613129565b91505092915050565b60008160011c9050919050565b6000808291508390505b60018511156131c25780860481111561319e5761319d612fbf565b5b60018516156131ad5780820291505b80810290506131bb8561316b565b9450613182565b94509492505050565b6000826131db5760019050613297565b816131e95760009050613297565b81600181146131ff576002811461320957613238565b6001915050613297565b60ff84111561321b5761321a612fbf565b5b8360020a91508482111561323257613231612fbf565b5b50613297565b5060208310610133831016604e8410600b841016171561326d5782820a90508381111561326857613267612fbf565b5b613297565b61327a8484846001613178565b9250905081840481111561329157613290612fbf565b5b81810290505b9392505050565b60006132a982612635565b91506132b483613105565b92506132e17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846131cb565b905092915050565b60006132f482612635565b91506132ff83612635565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561333857613337612fbf565b5b828202905092915050565b60006040820190506133586000830185612a77565b6133656020830184613022565b9392505050565b60008151905061337b8161280d565b92915050565b60006020828403121561339757613396612491565b5b60006133a58482850161336c565b91505092915050565b60006060820190506133c36000830186612a77565b6133d06020830185612a77565b6133dd6040830184613022565b949350505050565b60006040820190506133fa6000830185612a77565b6134076020830184612a77565b9392505050565b60006020820190506134236000830184613022565b92915050565b60008151905061343881612609565b92915050565b60006020828403121561345457613453612491565b5b600061346284828501613429565b91505092915050565b60008151905061347a8161263f565b92915050565b60006020828403121561349657613495612491565b5b60006134a48482850161346b565b91505092915050565b60006134b882612635565b91506134c383612635565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134f8576134f7612fbf565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613570602683613503565b915061357b82613514565b604082019050919050565b6000602082019050818103600083015261359f81613563565b9050919050565b600060a0820190506135bb6000830188612a77565b6135c86020830187612a77565b6135d56040830186613022565b6135e26060830185613022565b6135ef6080830184613022565b9695505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061362f602083613503565b915061363a826135f9565b602082019050919050565b6000602082019050818103600083015261365e81613622565b905091905056fea2646970667358221220b5fde5f168833c91cfa5216330839908f0e9276637b3070533dd47d058129ccc64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositeERC1155(address,uint256,uint256,uint128)": {
        "notice": "Deposite the an ERC1155 token of the caller  throws if the token address is not an ERC1155 contract address  lockTime updates whenever a token of same types is deposited after certain time  or before the previous lockPeriod elapse"
      },
      "depositeERC20(address,uint256,uint128)": {
        "notice": "Withdraws the an ERC72 token of the caller  throws if the token address is not an ERC721 contract address  throws if the caller tries to withdraw before time  throws if callers is not the owner of the token  lockTime updates whenever a token of same types is deposited after certain time  or before the previous lockPeriod elapse"
      },
      "depositeERC721(address,uint256,uint256)": {
        "notice": "Deposite the an ERC721 token of the caller  throws if the token address is not an ERC721 contract address  lockTime updates whenever a token of same types is deposited after certain time  or before the previous lockPeriod elapse"
      },
      "withdrawERC1155(address,uint256,uint256)": {
        "notice": "Withdraws the ERC1155 token of the caller  throws if the caller tries to withdraw before time  throws if callers tries withdrawing an amount greater than that of token id it own"
      },
      "withdrawERC721(address,uint256)": {
        "notice": "Withdraws the an ERC721 token of the caller  throws if the token address is not an ERC721 contract address  throws if the caller tries to withdraw before time  throws if callers is not the owner of the token"
      },
      "withdrawErc20(address,uint256)": {
        "notice": "Withdraws ERC20 token of the caller  throws if the caller tries to withdraw before time throws if callers balance is less that the amount"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TokenLock.sol:TokenLock",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 520,
        "contract": "contracts/TokenLock.sol:TokenLock",
        "label": "paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 534,
        "contract": "contracts/TokenLock.sol:TokenLock",
        "label": "ERC721Info",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(MyERC721)527_storage))"
      },
      {
        "astId": 548,
        "contract": "contracts/TokenLock.sol:TokenLock",
        "label": "ERC20Info",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(MyERC20)541_storage))"
      },
      {
        "astId": 564,
        "contract": "contracts/TokenLock.sol:TokenLock",
        "label": "ERC1155Info",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(MyERC1155)555_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(MyERC1155)555_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => struct TokenLock.MyERC1155)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_struct(MyERC1155)555_storage))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(MyERC20)541_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct TokenLock.MyERC20))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(MyERC20)541_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(MyERC1155)555_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct TokenLock.MyERC1155))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(MyERC1155)555_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(MyERC721)527_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct TokenLock.MyERC721))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(MyERC721)527_storage)"
      },
      "t_mapping(t_address,t_struct(MyERC20)541_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenLock.MyERC20)",
        "numberOfBytes": "32",
        "value": "t_struct(MyERC20)541_storage"
      },
      "t_mapping(t_uint256,t_struct(MyERC1155)555_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TokenLock.MyERC1155)",
        "numberOfBytes": "32",
        "value": "t_struct(MyERC1155)555_storage"
      },
      "t_mapping(t_uint256,t_struct(MyERC721)527_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TokenLock.MyERC721)",
        "numberOfBytes": "32",
        "value": "t_struct(MyERC721)527_storage"
      },
      "t_struct(MyERC1155)555_storage": {
        "encoding": "inplace",
        "label": "struct TokenLock.MyERC1155",
        "members": [
          {
            "astId": 550,
            "contract": "contracts/TokenLock.sol:TokenLock",
            "label": "tokenBal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 552,
            "contract": "contracts/TokenLock.sol:TokenLock",
            "label": "lockPeriod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 554,
            "contract": "contracts/TokenLock.sol:TokenLock",
            "label": "lockTime",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MyERC20)541_storage": {
        "encoding": "inplace",
        "label": "struct TokenLock.MyERC20",
        "members": [
          {
            "astId": 536,
            "contract": "contracts/TokenLock.sol:TokenLock",
            "label": "tokenBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 538,
            "contract": "contracts/TokenLock.sol:TokenLock",
            "label": "lockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 540,
            "contract": "contracts/TokenLock.sol:TokenLock",
            "label": "lockPeriod",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MyERC721)527_storage": {
        "encoding": "inplace",
        "label": "struct TokenLock.MyERC721",
        "members": [
          {
            "astId": 522,
            "contract": "contracts/TokenLock.sol:TokenLock",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 524,
            "contract": "contracts/TokenLock.sol:TokenLock",
            "label": "lockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 526,
            "contract": "contracts/TokenLock.sol:TokenLock",
            "label": "lockPeriod",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}